using JarvisAssistant.Core.Models;

namespace JarvisAssistant.Core.Interfaces
{
    /// <summary>
    /// Provides methods for generating and managing text embeddings.
    /// </summary>
    public interface IEmbeddingService
    {
        /// <summary>
        /// Generates embeddings for a single text input.
        /// </summary>
        /// <param name="text">The text to generate embeddings for.</param>
        /// <param name="cancellationToken">Cancellation token to cancel the operation.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the embedding vector.</returns>
        Task<float[]> GenerateEmbeddingAsync(string text, CancellationToken cancellationToken = default);

        /// <summary>
        /// Generates embeddings for multiple text inputs in batch.
        /// </summary>
        /// <param name="texts">The texts to generate embeddings for.</param>
        /// <param name="cancellationToken">Cancellation token to cancel the operation.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the embedding vectors.</returns>
        Task<float[][]> GenerateEmbeddingsBatchAsync(IEnumerable<string> texts, CancellationToken cancellationToken = default);

        /// <summary>
        /// Calculates the cosine similarity between two embedding vectors.
        /// </summary>
        /// <param name="embedding1">The first embedding vector.</param>
        /// <param name="embedding2">The second embedding vector.</param>
        /// <returns>The cosine similarity score between -1 and 1.</returns>
        float CalculateSimilarity(float[] embedding1, float[] embedding2);

        /// <summary>
        /// Gets the dimension size of embeddings generated by this service.
        /// </summary>
        /// <returns>The number of dimensions in the embedding vectors.</returns>
        int GetEmbeddingDimensions();

        /// <summary>
        /// Gets the name of the embedding model being used.
        /// </summary>
        /// <returns>The name or identifier of the embedding model.</returns>
        string GetModelName();
    }
}
